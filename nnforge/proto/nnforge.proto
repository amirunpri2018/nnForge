syntax = "proto2";

package nnforge.protobuf;

message NetworkSchema {
	optional string name = 1;
	repeated Layer layer = 2;
}

message Layer {
	required string type = 1;
	required string name = 2;
	repeated string input_layer_name = 14;

	optional ConvolutionalParam convolution_param = 3;
	optional AverageSubsamplingParam average_subsampling_param = 4;
	optional SparseConvolutionalParam sparse_convolution_param = 5;
	optional DropoutParam dropout_param = 6;
	optional LCSParam lcs_param = 7;
	optional MaxSubsamplingParam max_subsampling_param = 8;
	optional MaxoutParam maxout_param = 9;
	optional PReLUParam prelu_param = 10;
	optional RGBToYUVConvertParam rgb_to_yuv_convert_param = 11;
	optional TanHParam tanh_param = 12;
	optional UnTileParam untile_param = 13;
	optional AccuracyParam accuracy_param = 16;
	optional NegativeLogLikelihoodParam negative_log_likelihood_param = 17;
	optional CrossEntropyParam cross_entropy_param = 18;
	optional GradientModifierParam gradient_modifier_param = 19;
	optional ReshapeParam reshape_param = 20;
	optional LErrorParam lerror_param = 21;
	optional CDFMaxParam cdf_max_param = 22;
	optional PrefixSumParam prefix_sum_param = 23;
	optional UpsamplingParam upsampling_param = 24;
	optional CDF2PDFParam cdf_to_pdf_param = 25;
	optional EntryConvolutionParam entry_convolution_param = 26;
	optional AddParam add_param = 27;
	optional BatchNormParam batch_norm_param = 28;
	optional AffineGridGeneratorParam affine_grid_generator_param = 29;
	optional ReLUParam relu_param = 30;
	optional CustomParam custom_param = 1000;
}

message ConvolutionalParam {
	message ConvolutionalDimensionParam {
		required uint32 kernel_size = 1;
		optional uint32 left_padding = 2 [default = 0];
		optional uint32 right_padding = 3 [default = 0];
		optional uint32 stride = 4 [default = 1];
		optional uint32 dilation = 5 [default = 1];
	}
	required uint32 input_feature_map_count = 1;
	required uint32 output_feature_map_count = 2;
	repeated ConvolutionalDimensionParam dimension_param = 3;
	optional bool bias = 4 [default = true];
}

message AverageSubsamplingParam {
	message AverageSubsamplingDimensionParam {
		optional uint32 subsampling_size = 1;
		optional uint32 subsampled_size = 2;
	}
	message AverageSubsamplingFeatureMapParam {
		optional uint32 subsampling_size = 1;
		optional uint32 subsampled_size = 2;
	}
	message AverageSubsamplingEntryParam {
		required uint32 subsampling_size = 1;
	}
	repeated AverageSubsamplingDimensionParam dimension_param = 1;
	optional AverageSubsamplingFeatureMapParam feature_map_param = 2;
	optional AverageSubsamplingEntryParam entry_param = 3;
	optional float alpha = 4;
}

message UpsamplingParam {
	message UpsamplingDimensionParam {
		required uint32 upsampling_size = 1;
	}
	message UpsamplingFeatureMapParam {
		required uint32 upsampling_size = 1;
	}
	message UpsamplingEntryParam {
		required uint32 upsampling_size = 1;
	}
	repeated UpsamplingDimensionParam dimension_param = 1;
	optional UpsamplingFeatureMapParam feature_map_param = 2;
	optional UpsamplingEntryParam entry_param = 3;
}

message MaxSubsamplingParam {
	message MaxSubsamplingDimensionParam {
		required uint32 subsampling_size = 1;
		optional bool round_up = 2 [default = false];
		optional uint32 stride = 3;
	}
	message MaxSubsamplingFeatureMapParam {
		required uint32 subsampling_size = 1;
	}
	message MaxSubsamplingEntryParam {
		required uint32 subsampling_size = 1;
	}
	enum MaxFunction {
		MAX = 0;
		MIN = 1;
	}
	repeated MaxSubsamplingDimensionParam dimension_param = 1;
	optional bool tiling = 2 [default = false];
	optional MaxSubsamplingFeatureMapParam feature_map_param = 3;
	optional MaxSubsamplingEntryParam entry_param = 4;
	optional MaxFunction function = 5 [default = MAX];
}

message CDFMaxParam {
	message CDFMaxEntryParam {
		required uint32 subsampling_size = 1;
	}
	enum MaxFunction {
		MAX = 0;
		MIN = 1;
	}
	optional CDFMaxEntryParam entry_param = 1;
	optional MaxFunction function = 2 [default = MAX];
}

message EntryConvolutionParam {
	optional uint32 padding = 1 [default = 0];
}

message PrefixSumParam {
	message PrefixSumFeatureMapParam {
		required uint32 segment_length = 1;
	}
	optional PrefixSumFeatureMapParam feature_map_param = 1;
	optional float clamp_min = 2;
	optional float clamp_max = 3;
}

message CDF2PDFParam {
	message CDF2PDFFeatureMapParam {
		required uint32 segment_length = 1;
	}
	optional CDF2PDFFeatureMapParam feature_map_param = 1;
	optional float clamp_min = 2;
	optional float clamp_max = 3;
}

message SparseConvolutionalParam {
	message SparseConvolutionalDimensionParam {
		required uint32 kernel_size = 1;
		optional uint32 left_padding = 2 [default = 0];
		optional uint32 right_padding = 3 [default = 0];
		optional uint32 stride = 4 [default = 1];
	}
	required uint32 input_feature_map_count = 1;
	required uint32 output_feature_map_count = 2;
	optional uint32 feature_map_connection_count = 3;
	optional float feature_map_connection_sparsity_ratio = 4;
	repeated SparseConvolutionalDimensionParam dimension_param = 5;
	optional bool bias = 6 [default = true];
}

message DropoutParam {
	optional float dropout_rate = 1 [default = 0.5];
	optional bool per_feature_map = 2 [default = false];
}

message LCSParam {
	message LCSDimensionParam {
		required uint32 kernel_size = 1;
	}
	required uint32 feature_map_count = 1;
	repeated uint32 feature_map_affected = 2;
	repeated LCSDimensionParam dimension_param = 3;
}

message MaxoutParam {
	required uint32 feature_map_subsampling_size = 1;
}

message PReLUParam {
	required uint32 feature_map_count = 1;
}

message RGBToYUVConvertParam {
	message ColorFeatureMapParam {
		required uint32 red_and_y_feature_map_id = 1;
		required uint32 green_and_u_feature_map_id = 2;
		required uint32 blue_and_v_feature_map_id = 3;
	}
	repeated ColorFeatureMapParam color_feature_map_param = 1;
}

message TanHParam {
	optional float scale = 1 [default = 1.0];
	optional float steepness = 2 [default = 1.0];
}

message UnTileParam {
	message UnTileUpsamplingDimensionParam {
		required uint32 upsampling_size = 1;
	}
	message UnTileLevelParam {
		repeated UnTileUpsamplingDimensionParam dimension_param = 1;
	}
	repeated UnTileLevelParam level_param = 1;
}

message LErrorParam {
	optional float n = 1 [default = 2.0];
	optional float scale = 2 [default = 1.0];
}

message AccuracyParam {
	optional uint32 top_n = 1 [default = 1];
}

message NegativeLogLikelihoodParam {
	optional float scale = 1 [default = 1.0];
}

message CrossEntropyParam {
	optional float scale = 1 [default = 1.0];
}

message GradientModifierParam {
	optional float scale = 1 [default = 1.0];
}

message ReshapeParam {
	message EntryParam {
		optional uint32 upsampling_size = 1;
		optional uint32 downsampling_size = 2;
	}
	message FeatureMapParam {
		optional uint32 upsampling_size = 1;
		optional uint32 downsampling_size = 2;
	}
	message DimensionParam {
		optional uint32 upsampling_size = 1;
		optional uint32 downsampling_size = 2;
	}
	optional EntryParam entry_param = 1;
	optional FeatureMapParam feature_map_param = 2;
	repeated DimensionParam dimension_param = 3;
	optional uint32 collapse_to_dimensions = 4;
}

message AddParam {
	optional float alpha = 1 [default = 1.0];
}

message BatchNormParam {
	required uint32 feature_map_count = 1;
	optional float epsilon = 2;
}

message AffineGridGeneratorParam {
	message AffineGridGeneratorDimensionParam {
		required uint32 output_size = 1;
	}
	optional bool adjust_for_zero_init = 1 [default = true];
	repeated AffineGridGeneratorDimensionParam dimension_param = 2;
	optional float weight_scale = 3;
}

message ReLUParam {
	optional float negative_slope = 1 [default = 0.0];
}

message CustomParam {
	message CustomDimensionParam {
		repeated sint32 int_param = 1;
		repeated float float_param = 2;
	}
	repeated sint32 int_param = 1;
	repeated float float_param = 2;
	repeated CustomDimensionParam dimension_param = 3;
}

